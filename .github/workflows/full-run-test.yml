name: Classify command test

on:
  pull_request:
    paths:
      - 'lib/**'
      - 'src/**'
      - 'package.json'
      - 'composer.lock'
  push:
    branches:
      - main
      - stable*
    paths:
      - 'lib/**'
      - 'src/**'
      - 'package.json'
      - 'composer.lock'

env:
  APP_NAME: recognize

jobs:
  php:
    runs-on: ubuntu-latest

    strategy:
      # do not stop on another job's failure
      fail-fast: false
      matrix:
        php-versions: ['8.2']
        databases: ['sqlite']
        server-versions: ['master']
        pure-js-mode: ['false']
        imagenet-enabled: ['true']
        faces-enabled: ['true']
        landmarks-enabled: ['true']
        musicnn-enabled: ['true']
        movinet-enabled: ['true']
        include:
          # test pure-js once
          - server-versions: master
            databases: sqlite
            php-versions: 8.2
            pure-js-mode: true
            imagenet-enabled: true
            faces-enabled: true
            landmarks-enabled: true
            musicnn-enabled: true
            movinet-enabled: false

    name: Test classify command on ${{ matrix.databases }}-${{ matrix.server-versions }} wasm:${{ matrix.pure-js-mode }},imagenet:${{ matrix.imagenet-enabled }},faces:${{ matrix.faces-enabled }},landmarks:${{ matrix.landmarks-enabled }},movinet:${{ matrix.movinet-enabled }},musicnn:${{ matrix.musicnn-enabled }}

    env:
      MYSQL_PORT: 4444
      PGSQL_PORT: 4445

    timeout-minutes: 36 # max + 3*std over the last 212 successful runs

    services:
      mysql:
        image: mariadb:10.5
        ports:
          - 4444:3306/tcp
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
        options: --health-cmd="mysqladmin ping" --health-interval 5s --health-timeout 2s --health-retries 5
      postgres:
        image: postgres
        ports:
          - 4445:5432/tcp
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: rootpassword
          POSTGRES_DB: nextcloud
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 2s --health-retries 5

    steps:
      - name: Checkout server
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: nextcloud/server
          ref: ${{ matrix.server-versions }}

      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Set up php ${{ matrix.php-versions }}
        uses: shivammathur/setup-php@20529878ed81ef8e78ddf08b480401e6101a850f # v2.35.3
        with:
          php-version: ${{ matrix.php-versions }}
          tools: phpunit
          extensions: mbstring, iconv, fileinfo, intl, sqlite, pdo_mysql, pdo_sqlite, pgsql, pdo_pgsql, gd, zip

      - name: Checkout app
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: apps/${{ env.APP_NAME }}

      - name: Read package.json node and npm engines version
        uses: skjnldsv/read-package-engines-version-actions@06d6baf7d8f41934ab630e97d9e6c0bc9c9ac5e4 # v3
        id: versions
        with:
          path: apps/${{ env.APP_NAME }}
          fallbackNode: '^12'
          fallbackNpm: '^6'

      - name: Set up node ${{ steps.versions.outputs.nodeVersion }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ steps.versions.outputs.nodeVersion }}

      - name: Set up npm ${{ steps.versions.outputs.npmVersion }}
        run: npm i -g npm@"${{ steps.versions.outputs.npmVersion }}"

      - name: Install app
        working-directory: apps/${{ env.APP_NAME }}
        run: |
          composer install --no-dev
          make all
          make remove-binaries
          rm -rf models # Make it download from github
          wget https://github.com/nextcloud/recognize/releases/download/v3.4.0/test-files.zip
          unzip test-files.zip -d tests/res/

      - name: Set up Nextcloud and install app
        if: ${{ matrix.databases != 'pgsql'}}
        run: |
          sleep 25
          mkdir data
          ./occ maintenance:install --verbose --database=${{ matrix.databases }} --database-name=nextcloud --database-host=127.0.0.1 --database-port=$MYSQL_PORT --database-user=root --database-pass=rootpassword --admin-user admin --admin-pass password
          ./occ app:enable -vvv -f ${{ env.APP_NAME }}
          php -S localhost:8080 &

      - name: Set up Nextcloud and install app
        if: ${{ matrix.databases == 'pgsql'}}
        run: |
          sleep 25
          mkdir data
          ./occ maintenance:install --verbose --database=${{ matrix.databases }} --database-name=nextcloud --database-host=127.0.0.1 --database-port=$PGSQL_PORT --database-user=root --database-pass=rootpassword --admin-user admin --admin-pass password
          ./occ app:enable -vvv -f ${{ env.APP_NAME }}
          php -S localhost:8080 &

      - name: Install
        run: |
          ./occ app:enable -vvv ${{ env.APP_NAME }}

      - name: Upload photos
        run: |
          find apps/${{ env.APP_NAME }}/tests/res/ -type f -exec curl -u 'admin:password' -T "{}" 'http://localhost:8080/remote.php/webdav/' \;

      - name: Set pure-js mode
        run: |
          ./occ config:app:set --value ${{ matrix.pure-js-mode }} recognize tensorflow.purejs

      - name: Set imagenet.enabled
        run: |
          ./occ config:app:set --value ${{ matrix.imagenet-enabled }} recognize imagenet.enabled

      - name: Set faces.enabled
        run: |
          ./occ config:app:set --value ${{ matrix.faces-enabled }} recognize faces.enabled

      - name: Set landmarks.enabled
        run: |
          ./occ config:app:set --value ${{ matrix.landmarks-enabled }} recognize landmarks.enabled

      - name: Set musicnn.enabled
        run: |
          ./occ config:app:set --value ${{ matrix.musicnn-enabled }} recognize musicnn.enabled

      - name: Set movinet.enabled
        run: |
          ./occ config:app:set --value ${{ matrix.movinet-enabled }} recognize movinet.enabled

      - name: Run classifier
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          ./occ recognize:classify
          ./occ recognize:cluster-faces

      - name: Install cadaver
        if: ${{ matrix.faces-enabled }}
        run: |
          sudo apt -y install cadaver

      - name: Test webdav access
        if: ${{ matrix.faces-enabled }}
        run: |
          cat > ~/.netrc <<EOF
          machine localhost
          login admin
          password password
          EOF
          cadaver http://localhost:8080/remote.php/dav/recognize/admin/ <<EOF
          mv unassigned-faces/* faces/0/
          mkdir faces/toot
          mv faces/0/* faces/toot/
          mv faces/toot/ faces/blah/
          EOF

      - name: Print logs
        if: always()
        run: |
          cat data/nextcloud.log
